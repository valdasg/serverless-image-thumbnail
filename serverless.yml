service: app

frameworkVersion: '3'

provider:
  name: aws
  # for Klayers to worl select appropriate region ant Python runtime
  runtime: python3.8
  region: us-east-1
  stage: dev
  timeout: 10
  memorySize: 128
  layers:
  - arn:aws:lambda:us-east-1:770693421928:layer:Klayers-p38-Pillow:5
  # set environmental vars
  environment:
    THUMBNAIL_SIZE: 128
    # assign self (yaml block), provider: region = eu-west-1
    REGION_NAME: ${self:provider.region}
    DYNAMODB_TABLE: ${self:custom.dynamoTable}
  # create role and policy
  iam:
    role:
      statements:
        - Effect: 'Allow'
          Resource: '*'
          Action: 's3:*'
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"
# set custom vars
custom:
  bucket: valdas-thumbnails
  dynamoTable: img-url-tables
  pythonRequirements:
    dockerizePip: True
    
# create lambda functions
functions:
  # thumbnail generator
  s3_thumbnail_generator:
    handler: handler.s3_thumbnail_generator
    events:
      - s3:
         bucket: ${self:custom.bucket}
         event: s3:ObjectCreated:*
         rules:
           - suffix: .png
  # list thumbnails
  list:
    handler: handler.s3_get_thumbnail_urls
    events:
      - http:
          path: images/all
          method: get
          # checks if server permits request 
          cors: true
  
  # get item metadata
  get:
    handler: handler.s3_get_item
    events:
      - http:
          # dynamically pass image id, make sure its the same as defined in schema
          path: images/get/{id}
          method: get 
          cors: true
  
  # delete item metadata
  delete:
    handler: handler.s3_delete_item
    events:
      - http:
          # dynamically pass image id, make sure its the same as defined in schema
          path: images/delete/{id}
          method: delete 
          cors: true      

# create resources
resources:
  Resources:
    ImagesDynamoDbTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        # set a primary key and hash partition
        KeySchema:
          - AttributeName: id
          # Note all caps!
            KeyType: HASH
        # number of reads and writes per s until dynamo db returns exception  
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}

# prior to this run: sls plugin install -n serverless-python-requirements
plugins:
  - serverless-python-requirements
  